namespace wsnapi_server {
/* wsnapi_server_description.h
   Generated by wsdl2h 2.8.2 from WSNService.wsdl and typemap.dat
   2011-06-15 20:20:03 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on wsnapi_server_description.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:WSNService                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:WSNService"
ns2 = ""
ns3 = "urn:CommonTypes"

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"urn:CommonTypes"
//gsoap ns3   schema namespace:	urn:CommonTypes
//gsoap ns3   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"urn:WSNService"
//gsoap ns1   schema namespace:	urn:WSNService
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns3__getNetwork.
class ns3__getNetwork;

//  Forward declaration of class ns3__getNetworkResponse.
class ns3__getNetworkResponse;

//  Forward declaration of class ns3__KeyValuePair.
class ns3__KeyValuePair;

//  Forward declaration of class ns3__message.
class ns3__message;

//  Forward declaration of class ns1__areNodesAlive.
class ns1__areNodesAlive;

//  Forward declaration of class ns1__areNodesAliveResponse.
class ns1__areNodesAliveResponse;

//  Forward declaration of class ns1__ChannelHandlerConfiguration.
class ns1__ChannelHandlerConfiguration;

//  Forward declaration of class ns1__ChannelHandlerDescription.
class ns1__ChannelHandlerDescription;

//  Forward declaration of class ns1__destroyVirtualLink.
class ns1__destroyVirtualLink;

//  Forward declaration of class ns1__destroyVirtualLinkResponse.
class ns1__destroyVirtualLinkResponse;

//  Forward declaration of class ns1__disableNode.
class ns1__disableNode;

//  Forward declaration of class ns1__disableNodeResponse.
class ns1__disableNodeResponse;

//  Forward declaration of class ns1__disablePhysicalLink.
class ns1__disablePhysicalLink;

//  Forward declaration of class ns1__disablePhysicalLinkResponse.
class ns1__disablePhysicalLinkResponse;

//  Forward declaration of class ns1__enableNode.
class ns1__enableNode;

//  Forward declaration of class ns1__enableNodeResponse.
class ns1__enableNodeResponse;

//  Forward declaration of class ns1__enablePhysicalLink.
class ns1__enablePhysicalLink;

//  Forward declaration of class ns1__enablePhysicalLinkResponse.
class ns1__enablePhysicalLinkResponse;

//  Forward declaration of class ns1__flashPrograms.
class ns1__flashPrograms;

//  Forward declaration of class ns1__flashProgramsResponse.
class ns1__flashProgramsResponse;

//  Forward declaration of class ns1__getFilters.
class ns1__getFilters;

//  Forward declaration of class ns1__getFiltersResponse.
class ns1__getFiltersResponse;

//  Forward declaration of class ns1__getSupportedChannelHandlers.
class ns1__getSupportedChannelHandlers;

//  Forward declaration of class ns1__getSupportedChannelHandlersResponse.
class ns1__getSupportedChannelHandlersResponse;

//  Forward declaration of class ns1__getVersion.
class ns1__getVersion;

//  Forward declaration of class ns1__getVersionResponse.
class ns1__getVersionResponse;

//  Forward declaration of class ns1__program.
class ns1__program;

//  Forward declaration of class ns1__programMetaData.
class ns1__programMetaData;

//  Forward declaration of class ns1__resetNodes.
class ns1__resetNodes;

//  Forward declaration of class ns1__resetNodesResponse.
class ns1__resetNodesResponse;

//  Forward declaration of class ns1__send.
class ns1__send;

//  Forward declaration of class ns1__sendResponse.
class ns1__sendResponse;

//  Forward declaration of class ns1__setChannelPipeline.
class ns1__setChannelPipeline;

//  Forward declaration of class ns1__setChannelPipelineResponse.
class ns1__setChannelPipelineResponse;

//  Forward declaration of class ns1__setVirtualLink.
class ns1__setVirtualLink;

//  Forward declaration of class ns1__setVirtualLinkResponse.
class ns1__setVirtualLinkResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:WSNService                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:CommonTypes":requestId is a simpleType restriction of xs:string.
typedef char* ns3__requestId;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:WSNService                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// "urn:CommonTypes":getNetwork is a complexType.
class ns3__getNetwork
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":getNetworkResponse is a complexType.
class ns3__getNetworkResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":KeyValuePair is a complexType.
class ns3__KeyValuePair
{ public:
/// Element key of type xs:string.
    char*                                key                            1;	///< Required element.
/// Element value of type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":message is a complexType.
class ns3__message
{ public:
/// Element sourceNodeId of type xs:string.
    char*                                sourceNodeId                   1;	///< Required element.
/// Element timestamp of type xs:dateTime.
    time_t                               timestamp                      1;	///< Required element.
/// Element binaryData of type xs:base64Binary.
    xsd__base64Binary                    binaryData                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:WSNService                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:WSNService":areNodesAlive is a complexType.
class ns1__areNodesAlive
{ public:
/// Size of array of char* is 1..unbounded
   $int                                  __sizenodes                    1;
/// Pointer to array char* of length 1..unbounded
    char*                               *nodes                          1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":areNodesAliveResponse is a complexType.
class ns1__areNodesAliveResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":ChannelHandlerConfiguration is a complexType.
class ns1__ChannelHandlerConfiguration
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// Size of array of ns3__KeyValuePair* is 0..unbounded
   $int                                  __sizeconfiguration            0;
/// Pointer to array ns3__KeyValuePair* of length 0..unbounded
    ns3__KeyValuePair*                  *configuration                  0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":ChannelHandlerDescription is a complexType.
class ns1__ChannelHandlerDescription
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// Element description of type xs:string.
    char*                                description                    0;	///< Optional element.
/// Size of array of ns3__KeyValuePair* is 0..unbounded
   $int                                  __sizeconfigurationOptions     0;
/// Pointer to array ns3__KeyValuePair* of length 0..unbounded
    ns3__KeyValuePair*                  *configurationOptions           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":destroyVirtualLink is a complexType.
class ns1__destroyVirtualLink
{ public:
/// Element sourceNode of type xs:string.
    char*                                sourceNode                     1;	///< Required element.
/// Element targetNode of type xs:string.
    char*                                targetNode                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":destroyVirtualLinkResponse is a complexType.
class ns1__destroyVirtualLinkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disableNode is a complexType.
class ns1__disableNode
{ public:
/// Element node of type xs:string.
    char*                                node                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disableNodeResponse is a complexType.
class ns1__disableNodeResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disablePhysicalLink is a complexType.
class ns1__disablePhysicalLink
{ public:
/// Element nodeA of type xs:string.
    char*                                nodeA                          1;	///< Required element.
/// Element nodeB of type xs:string.
    char*                                nodeB                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":disablePhysicalLinkResponse is a complexType.
class ns1__disablePhysicalLinkResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enableNode is a complexType.
class ns1__enableNode
{ public:
/// Element node of type xs:string.
    char*                                node                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enableNodeResponse is a complexType.
class ns1__enableNodeResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enablePhysicalLink is a complexType.
class ns1__enablePhysicalLink
{ public:
/// Element nodeA of type xs:string.
    char*                                nodeA                          1;	///< Required element.
/// Element nodeB of type xs:string.
    char*                                nodeB                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":enablePhysicalLinkResponse is a complexType.
class ns1__enablePhysicalLinkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":flashPrograms is a complexType.
class ns1__flashPrograms
{ public:
/// Size of array of char* is 1..unbounded
   $int                                  __sizenodeIds                  1;
/// Pointer to array char* of length 1..unbounded
    char*                               *nodeIds                        1;
/// Size of array of int is 1..unbounded
   $int                                  __sizeprogramIndices           1;
/// Pointer to array int of length 1..unbounded
    int                                 *programIndices                 1;
/// Size of array of ns1__program* is 1..unbounded
   $int                                  __sizeprograms                 1;
/// Pointer to array ns1__program* of length 1..unbounded
    ns1__program*                       *programs                       1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":flashProgramsResponse is a complexType.
class ns1__flashProgramsResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getFilters is a complexType.
class ns1__getFilters
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getFiltersResponse is a complexType.
class ns1__getFiltersResponse
{ public:
/// Size of array of char* is 0..unbounded
   $int                                  __sizereturn_                  0;
/// Pointer to array char* of length 0..unbounded
    char*                               *return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getSupportedChannelHandlers is a complexType.
class ns1__getSupportedChannelHandlers
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getSupportedChannelHandlersResponse is a complexType.
class ns1__getSupportedChannelHandlersResponse
{ public:
/// Size of array of ns1__ChannelHandlerDescription* is 0..unbounded
   $int                                  __sizereturn_                  0;
/// Pointer to array ns1__ChannelHandlerDescription* of length 0..unbounded
    ns1__ChannelHandlerDescription*     *return_                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getVersion is a complexType.
class ns1__getVersion
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":getVersionResponse is a complexType.
class ns1__getVersionResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":program is a complexType.
class ns1__program
{ public:
/// Element metaData of type "urn:WSNService":programMetaData.
    ns1__programMetaData*                metaData                       0;	///< Optional element.
/// Element program of type xs:base64Binary.
    xsd__base64Binary                    program                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":programMetaData is a complexType.
class ns1__programMetaData
{ public:
/// Element version of type xs:string.
    char*                                version                        0;	///< Optional element.
/// Element name of type xs:string.
    char*                                name                           0;	///< Optional element.
/// Element platform of type xs:string.
    char*                                platform                       0;	///< Optional element.
/// Element other of type xs:string.
    char*                                other                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":resetNodes is a complexType.
class ns1__resetNodes
{ public:
/// Size of array of char* is 1..unbounded
   $int                                  __sizenodes                    1;
/// Pointer to array char* of length 1..unbounded
    char*                               *nodes                          1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":resetNodesResponse is a complexType.
class ns1__resetNodesResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":send is a complexType.
class ns1__send
{ public:
/// Size of array of char* is 1..unbounded
   $int                                  __sizenodeIds                  1;
/// Pointer to array char* of length 1..unbounded
    char*                               *nodeIds                        1;
/// Element message of type "urn:CommonTypes":message.
    ns3__message*                        message                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":sendResponse is a complexType.
class ns1__sendResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setChannelPipeline is a complexType.
class ns1__setChannelPipeline
{ public:
/// Size of array of char* is 0..unbounded
   $int                                  __sizenodes                    0;
/// Pointer to array char* of length 0..unbounded
    char*                               *nodes                          0;
/// Size of array of ns1__ChannelHandlerConfiguration* is 0..unbounded
   $int                                  __sizechannelHandlerConfigurations 0;
/// Pointer to array ns1__ChannelHandlerConfiguration* of length 0..unbounded
    ns1__ChannelHandlerConfiguration*   *channelHandlerConfigurations   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setChannelPipelineResponse is a complexType.
class ns1__setChannelPipelineResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setVirtualLink is a complexType.
class ns1__setVirtualLink
{ public:
/// Element sourceNode of type xs:string.
    char*                                sourceNode                     1;	///< Required element.
/// Element targetNode of type xs:string.
    char*                                targetNode                     1;	///< Required element.
/// Element remoteServiceInstance of type xs:string.
    char*                                remoteServiceInstance          1;	///< Required element.
/// Size of array of char* is 0..unbounded
   $int                                  __sizeparameters               0;
/// Pointer to array char* of length 0..unbounded
    char*                               *parameters                     0;	///< Nullable pointer.
/// Size of array of char* is 0..unbounded
   $int                                  __sizefilters                  0;
/// Pointer to array char* of length 0..unbounded
    char*                               *filters                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:WSNService":setVirtualLinkResponse is a complexType.
class ns1__setVirtualLinkResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:CommonTypes":getNetwork of type "urn:CommonTypes":getNetwork.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:CommonTypes":getNetworkResponse of type "urn:CommonTypes":getNetworkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:CommonTypes":message of type "urn:CommonTypes":message.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:WSNService                                                           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:WSNService":areNodesAlive of type "urn:WSNService":areNodesAlive.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":areNodesAliveResponse of type "urn:WSNService":areNodesAliveResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":destroyVirtualLink of type "urn:WSNService":destroyVirtualLink.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":destroyVirtualLinkResponse of type "urn:WSNService":setVirtualLinkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":disableNode of type "urn:WSNService":disableNode.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":disableNodeResponse of type "urn:WSNService":disableNodeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":disablePhysicalLink of type "urn:WSNService":disablePhysicalLink.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":disablePhysicalLinkResponse of type "urn:WSNService":disablePhysicalLinkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":enableNode of type "urn:WSNService":enableNode.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":enableNodeResponse of type "urn:WSNService":enableNodeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":enablePhysicalLink of type "urn:WSNService":enablePhysicalLink.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":enablePhysicalLinkResponse of type "urn:WSNService":enablePhysicalLinkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":flashPrograms of type "urn:WSNService":flashPrograms.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":flashProgramsResponse of type "urn:WSNService":flashProgramsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":getFilters of type "urn:WSNService":getFilters.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":getFiltersResponse of type "urn:WSNService":getFiltersResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":getSupportedChannelHandlers of type "urn:WSNService":getSupportedChannelHandlers.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":getSupportedChannelHandlersResponse of type "urn:WSNService":getSupportedChannelHandlersResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":getVersion of type "urn:WSNService":getVersion.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":getVersionResponse of type "urn:WSNService":getVersionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":resetNodes of type "urn:WSNService":resetNodes.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":resetNodesResponse of type "urn:WSNService":resetNodesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":send of type "urn:WSNService":send.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":sendResponse of type "urn:WSNService":sendResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":setChannelPipeline of type "urn:WSNService":setChannelPipeline.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":setChannelPipelineResponse of type "urn:WSNService":setChannelPipelineResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":setVirtualLink of type "urn:WSNService":setVirtualLink.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:WSNService":setVirtualLinkResponse of type "urn:WSNService":setVirtualLinkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:WSNService                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	WSNPortBinding 
//gsoap ns1  service type:	WSN 
//gsoap ns1  service port:	REPLACE_WITH_ACTUAL_URL 
//gsoap ns1  service namespace:	urn:WSNService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSNService Definitions

@section WSNService_bindings Service Bindings

  - @ref WSNPortBinding

@section WSNService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WSNPortBinding Binding "WSNPortBinding"

@section WSNPortBinding_operations Operations of Binding  "WSNPortBinding"

  - @ref __ns1__areNodesAlive

  - @ref __ns1__destroyVirtualLink

  - @ref __ns1__disableNode

  - @ref __ns1__disablePhysicalLink

  - @ref __ns1__enableNode

  - @ref __ns1__enablePhysicalLink

  - @ref __ns1__flashPrograms

  - @ref __ns1__getSupportedChannelHandlers

  - @ref __ns1__getFilters

  - @ref __ns1__getNetwork

  - @ref __ns1__getVersion

  - @ref __ns1__resetNodes

  - @ref __ns1__send

  - @ref __ns1__setChannelPipeline

  - @ref __ns1__setVirtualLink

@section WSNPortBinding_ports Endpoints of Binding  "WSNPortBinding"

  - REPLACE_WITH_ACTUAL_URL

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WSNPortBinding                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__areNodesAlive                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__areNodesAlive" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__areNodesAlive(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__areNodesAlive*                 ns1__areNodesAlive_,
    // response parameters:
    ns1__areNodesAliveResponse*         ns1__areNodesAliveResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__areNodesAlive(
    struct soap *soap,
    // request parameters:
    ns1__areNodesAlive*                 ns1__areNodesAlive_,
    // response parameters:
    ns1__areNodesAliveResponse*         ns1__areNodesAliveResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	areNodesAlive document
//gsoap ns1  service method-encoding:	areNodesAlive literal
//gsoap ns1  service method-action:	areNodesAlive ""
int __ns1__areNodesAlive(
    ns1__areNodesAlive*                 ns1__areNodesAlive_,	///< Request parameter
    ns1__areNodesAliveResponse*         ns1__areNodesAliveResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__destroyVirtualLink                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__destroyVirtualLink" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__destroyVirtualLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__destroyVirtualLink*            ns1__destroyVirtualLink_,
    // response parameters:
    ns1__setVirtualLinkResponse*        ns1__destroyVirtualLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__destroyVirtualLink(
    struct soap *soap,
    // request parameters:
    ns1__destroyVirtualLink*            ns1__destroyVirtualLink_,
    // response parameters:
    ns1__setVirtualLinkResponse*        ns1__destroyVirtualLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	destroyVirtualLink document
//gsoap ns1  service method-encoding:	destroyVirtualLink literal
//gsoap ns1  service method-action:	destroyVirtualLink ""
int __ns1__destroyVirtualLink(
    ns1__destroyVirtualLink*            ns1__destroyVirtualLink_,	///< Request parameter
    ns1__setVirtualLinkResponse*        ns1__destroyVirtualLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__disableNode                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__disableNode" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__disableNode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__disableNode*                   ns1__disableNode_,
    // response parameters:
    ns1__disableNodeResponse*           ns1__disableNodeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__disableNode(
    struct soap *soap,
    // request parameters:
    ns1__disableNode*                   ns1__disableNode_,
    // response parameters:
    ns1__disableNodeResponse*           ns1__disableNodeResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	disableNode document
//gsoap ns1  service method-encoding:	disableNode literal
//gsoap ns1  service method-action:	disableNode ""
int __ns1__disableNode(
    ns1__disableNode*                   ns1__disableNode_,	///< Request parameter
    ns1__disableNodeResponse*           ns1__disableNodeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__disablePhysicalLink                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__disablePhysicalLink" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__disablePhysicalLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__disablePhysicalLink*           ns1__disablePhysicalLink_,
    // response parameters:
    ns1__disablePhysicalLinkResponse*   ns1__disablePhysicalLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__disablePhysicalLink(
    struct soap *soap,
    // request parameters:
    ns1__disablePhysicalLink*           ns1__disablePhysicalLink_,
    // response parameters:
    ns1__disablePhysicalLinkResponse*   ns1__disablePhysicalLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	disablePhysicalLink document
//gsoap ns1  service method-encoding:	disablePhysicalLink literal
//gsoap ns1  service method-action:	disablePhysicalLink ""
int __ns1__disablePhysicalLink(
    ns1__disablePhysicalLink*           ns1__disablePhysicalLink_,	///< Request parameter
    ns1__disablePhysicalLinkResponse*   ns1__disablePhysicalLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__enableNode                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__enableNode" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__enableNode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__enableNode*                    ns1__enableNode_,
    // response parameters:
    ns1__enableNodeResponse*            ns1__enableNodeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__enableNode(
    struct soap *soap,
    // request parameters:
    ns1__enableNode*                    ns1__enableNode_,
    // response parameters:
    ns1__enableNodeResponse*            ns1__enableNodeResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	enableNode document
//gsoap ns1  service method-encoding:	enableNode literal
//gsoap ns1  service method-action:	enableNode ""
int __ns1__enableNode(
    ns1__enableNode*                    ns1__enableNode_,	///< Request parameter
    ns1__enableNodeResponse*            ns1__enableNodeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__enablePhysicalLink                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__enablePhysicalLink" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__enablePhysicalLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__enablePhysicalLink*            ns1__enablePhysicalLink_,
    // response parameters:
    ns1__enablePhysicalLinkResponse*    ns1__enablePhysicalLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__enablePhysicalLink(
    struct soap *soap,
    // request parameters:
    ns1__enablePhysicalLink*            ns1__enablePhysicalLink_,
    // response parameters:
    ns1__enablePhysicalLinkResponse*    ns1__enablePhysicalLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	enablePhysicalLink document
//gsoap ns1  service method-encoding:	enablePhysicalLink literal
//gsoap ns1  service method-action:	enablePhysicalLink ""
int __ns1__enablePhysicalLink(
    ns1__enablePhysicalLink*            ns1__enablePhysicalLink_,	///< Request parameter
    ns1__enablePhysicalLinkResponse*    ns1__enablePhysicalLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__flashPrograms                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__flashPrograms" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__flashPrograms(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__flashPrograms*                 ns1__flashPrograms_,
    // response parameters:
    ns1__flashProgramsResponse*         ns1__flashProgramsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__flashPrograms(
    struct soap *soap,
    // request parameters:
    ns1__flashPrograms*                 ns1__flashPrograms_,
    // response parameters:
    ns1__flashProgramsResponse*         ns1__flashProgramsResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	flashPrograms document
//gsoap ns1  service method-encoding:	flashPrograms literal
//gsoap ns1  service method-action:	flashPrograms ""
int __ns1__flashPrograms(
    ns1__flashPrograms*                 ns1__flashPrograms_,	///< Request parameter
    ns1__flashProgramsResponse*         ns1__flashProgramsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportedChannelHandlers                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSupportedChannelHandlers" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportedChannelHandlers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getSupportedChannelHandlers*   ns1__getSupportedChannelHandlers_,
    // response parameters:
    ns1__getSupportedChannelHandlersResponse* ns1__getSupportedChannelHandlersResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportedChannelHandlers(
    struct soap *soap,
    // request parameters:
    ns1__getSupportedChannelHandlers*   ns1__getSupportedChannelHandlers_,
    // response parameters:
    ns1__getSupportedChannelHandlersResponse* ns1__getSupportedChannelHandlersResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSupportedChannelHandlers document
//gsoap ns1  service method-encoding:	getSupportedChannelHandlers literal
//gsoap ns1  service method-action:	getSupportedChannelHandlers ""
int __ns1__getSupportedChannelHandlers(
    ns1__getSupportedChannelHandlers*   ns1__getSupportedChannelHandlers_,	///< Request parameter
    ns1__getSupportedChannelHandlersResponse* ns1__getSupportedChannelHandlersResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getFilters                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getFilters" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getFilters(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getFilters*                    ns1__getFilters_,
    // response parameters:
    ns1__getFiltersResponse*            ns1__getFiltersResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getFilters(
    struct soap *soap,
    // request parameters:
    ns1__getFilters*                    ns1__getFilters_,
    // response parameters:
    ns1__getFiltersResponse*            ns1__getFiltersResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getFilters document
//gsoap ns1  service method-encoding:	getFilters literal
//gsoap ns1  service method-action:	getFilters ""
int __ns1__getFilters(
    ns1__getFilters*                    ns1__getFilters_,	///< Request parameter
    ns1__getFiltersResponse*            ns1__getFiltersResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getNetwork                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getNetwork" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getNetwork(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns3__getNetwork*                    ns3__getNetwork_,
    // response parameters:
    ns3__getNetworkResponse*            ns3__getNetworkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getNetwork(
    struct soap *soap,
    // request parameters:
    ns3__getNetwork*                    ns3__getNetwork_,
    // response parameters:
    ns3__getNetworkResponse*            ns3__getNetworkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getNetwork document
//gsoap ns1  service method-encoding:	getNetwork literal
//gsoap ns1  service method-action:	getNetwork ""
int __ns1__getNetwork(
    ns3__getNetwork*                    ns3__getNetwork_,	///< Request parameter
    ns3__getNetworkResponse*            ns3__getNetworkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVersion                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getVersion" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getVersion*                    ns1__getVersion_,
    // response parameters:
    ns1__getVersionResponse*            ns1__getVersionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVersion(
    struct soap *soap,
    // request parameters:
    ns1__getVersion*                    ns1__getVersion_,
    // response parameters:
    ns1__getVersionResponse*            ns1__getVersionResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVersion document
//gsoap ns1  service method-encoding:	getVersion literal
//gsoap ns1  service method-action:	getVersion ""
int __ns1__getVersion(
    ns1__getVersion*                    ns1__getVersion_,	///< Request parameter
    ns1__getVersionResponse*            ns1__getVersionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__resetNodes                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__resetNodes" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__resetNodes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__resetNodes*                    ns1__resetNodes_,
    // response parameters:
    ns1__resetNodesResponse*            ns1__resetNodesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__resetNodes(
    struct soap *soap,
    // request parameters:
    ns1__resetNodes*                    ns1__resetNodes_,
    // response parameters:
    ns1__resetNodesResponse*            ns1__resetNodesResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	resetNodes document
//gsoap ns1  service method-encoding:	resetNodes literal
//gsoap ns1  service method-action:	resetNodes ""
int __ns1__resetNodes(
    ns1__resetNodes*                    ns1__resetNodes_,	///< Request parameter
    ns1__resetNodesResponse*            ns1__resetNodesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__send                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__send" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__send(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__send*                          ns1__send_,
    // response parameters:
    ns1__sendResponse*                  ns1__sendResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__send(
    struct soap *soap,
    // request parameters:
    ns1__send*                          ns1__send_,
    // response parameters:
    ns1__sendResponse*                  ns1__sendResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	send document
//gsoap ns1  service method-encoding:	send literal
//gsoap ns1  service method-action:	send ""
int __ns1__send(
    ns1__send*                          ns1__send_,	///< Request parameter
    ns1__sendResponse*                  ns1__sendResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setChannelPipeline                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setChannelPipeline" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setChannelPipeline(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__setChannelPipeline*            ns1__setChannelPipeline_,
    // response parameters:
    ns1__setChannelPipelineResponse*    ns1__setChannelPipelineResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setChannelPipeline(
    struct soap *soap,
    // request parameters:
    ns1__setChannelPipeline*            ns1__setChannelPipeline_,
    // response parameters:
    ns1__setChannelPipelineResponse*    ns1__setChannelPipelineResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setChannelPipeline document
//gsoap ns1  service method-encoding:	setChannelPipeline literal
//gsoap ns1  service method-action:	setChannelPipeline ""
int __ns1__setChannelPipeline(
    ns1__setChannelPipeline*            ns1__setChannelPipeline_,	///< Request parameter
    ns1__setChannelPipelineResponse*    ns1__setChannelPipelineResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setVirtualLink                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setVirtualLink" of service binding "WSNPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setVirtualLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__setVirtualLink*                ns1__setVirtualLink_,
    // response parameters:
    ns1__setVirtualLinkResponse*        ns1__setVirtualLinkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setVirtualLink(
    struct soap *soap,
    // request parameters:
    ns1__setVirtualLink*                ns1__setVirtualLink_,
    // response parameters:
    ns1__setVirtualLinkResponse*        ns1__setVirtualLinkResponse_
  );
@endcode

C++ proxy class (defined in soapWSNPortBindingProxy.h):
@code
  class WSNPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSNPortBindingService.h):
@code
  class WSNPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setVirtualLink document
//gsoap ns1  service method-encoding:	setVirtualLink literal
//gsoap ns1  service method-action:	setVirtualLink ""
int __ns1__setVirtualLink(
    ns1__setVirtualLink*                ns1__setVirtualLink_,	///< Request parameter
    ns1__setVirtualLinkResponse*        ns1__setVirtualLinkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns3 Top-level root elements of schema "urn:CommonTypes"

  - <ns3:getNetwork> (use wsdl2h option -g to auto-generate)

  - <ns3:getNetworkResponse> (use wsdl2h option -g to auto-generate)

  - <ns3:message> (use wsdl2h option -g to auto-generate)

@section ns1 Top-level root elements of schema "urn:WSNService"

  - <ns1:areNodesAlive> (use wsdl2h option -g to auto-generate)

  - <ns1:areNodesAliveResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:destroyVirtualLink> (use wsdl2h option -g to auto-generate)

  - <ns1:destroyVirtualLinkResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:disableNode> (use wsdl2h option -g to auto-generate)

  - <ns1:disableNodeResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:disablePhysicalLink> (use wsdl2h option -g to auto-generate)

  - <ns1:disablePhysicalLinkResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:enableNode> (use wsdl2h option -g to auto-generate)

  - <ns1:enableNodeResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:enablePhysicalLink> (use wsdl2h option -g to auto-generate)

  - <ns1:enablePhysicalLinkResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:flashPrograms> (use wsdl2h option -g to auto-generate)

  - <ns1:flashProgramsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getFilters> (use wsdl2h option -g to auto-generate)

  - <ns1:getFiltersResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getSupportedChannelHandlers> (use wsdl2h option -g to auto-generate)

  - <ns1:getSupportedChannelHandlersResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getVersion> (use wsdl2h option -g to auto-generate)

  - <ns1:getVersionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:resetNodes> (use wsdl2h option -g to auto-generate)

  - <ns1:resetNodesResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:send> (use wsdl2h option -g to auto-generate)

  - <ns1:sendResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:setChannelPipeline> (use wsdl2h option -g to auto-generate)

  - <ns1:setChannelPipelineResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:setVirtualLink> (use wsdl2h option -g to auto-generate)

  - <ns1:setVirtualLinkResponse> (use wsdl2h option -g to auto-generate)

*/

} // namespace wsnapi_server

/* End of wsnapi_server_description.h */
