/* controller_client_description.h
   Generated by wsdl2h 2.8.2 from ControllerService.wsdl and typemap.dat
   2011-06-15 20:20:03 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on controller_client_description.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:ControllerService                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:ControllerService"
ns2 = ""
ns3 = "urn:CommonTypes"

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"urn:ControllerService"
//gsoap ns1   schema namespace:	urn:ControllerService
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"urn:CommonTypes"
//gsoap ns3   schema namespace:	urn:CommonTypes
//gsoap ns3   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__experimentEnded.
class ns1__experimentEnded;

//  Forward declaration of class ns1__receive.
class ns1__receive;

//  Forward declaration of class ns1__receiveNotification.
class ns1__receiveNotification;

//  Forward declaration of class ns1__receiveStatus.
class ns1__receiveStatus;

//  Forward declaration of class ns1__requestStatus.
class ns1__requestStatus;

//  Forward declaration of class ns1__status.
class ns1__status;

//  Forward declaration of class ns3__getNetwork.
class ns3__getNetwork;

//  Forward declaration of class ns3__getNetworkResponse.
class ns3__getNetworkResponse;

//  Forward declaration of class ns3__KeyValuePair.
class ns3__KeyValuePair;

//  Forward declaration of class ns3__message.
class ns3__message;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ControllerService                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// "urn:CommonTypes":requestId is a simpleType restriction of xs:string.
typedef char* ns3__requestId;

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ControllerService                                                    *
 *                                                                            *
\******************************************************************************/


/// "urn:ControllerService":experimentEnded is a complexType.
class ns1__experimentEnded
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:ControllerService":receive is a complexType.
class ns1__receive
{ public:
/// Size of array of ns3__message* is 1..unbounded
   $int                                  __sizemsg                      1;
/// Pointer to array ns3__message* of length 1..unbounded
    ns3__message*                       *msg                            1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:ControllerService":receiveNotification is a complexType.
class ns1__receiveNotification
{ public:
/// Size of array of char* is 1..unbounded
   $int                                  __sizemsg                      1;
/// Pointer to array char* of length 1..unbounded
    char*                               *msg                            1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:ControllerService":receiveStatus is a complexType.
class ns1__receiveStatus
{ public:
/// Size of array of ns1__requestStatus* is 1..unbounded
   $int                                  __sizestatus                   1;
/// Pointer to array ns1__requestStatus* of length 1..unbounded
    ns1__requestStatus*                 *status                         1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:ControllerService":requestStatus is a complexType.
class ns1__requestStatus
{ public:
/// Element requestId of type "urn:CommonTypes":requestId.
    ns3__requestId                       requestId                      1;	///< Required element.
/// Size of array of ns1__status* is 1..unbounded
   $int                                  __sizestatus                   1;
/// Pointer to array ns1__status* of length 1..unbounded
    ns1__status*                        *status                         1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:ControllerService":status is a complexType.
class ns1__status
{ public:
/// Element nodeId of type xs:string.
    char*                                nodeId                         1;	///< Required element.
/// Element value of type xs:int.
    int*                                 value                          0;	///< Optional element.
/// Element msg of type xs:string.
    char*                                msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// "urn:CommonTypes":getNetwork is a complexType.
class ns3__getNetwork
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":getNetworkResponse is a complexType.
class ns3__getNetworkResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":KeyValuePair is a complexType.
class ns3__KeyValuePair
{ public:
/// Element key of type xs:string.
    char*                                key                            1;	///< Required element.
/// Element value of type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":message is a complexType.
class ns3__message
{ public:
/// Element sourceNodeId of type xs:string.
    char*                                sourceNodeId                   1;	///< Required element.
/// Element timestamp of type xs:dateTime.
    time_t                               timestamp                      1;	///< Required element.
/// Element binaryData of type xs:base64Binary.
    xsd__base64Binary                    binaryData                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ControllerService                                                    *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:ControllerService":experimentEnded of type "urn:ControllerService":experimentEnded.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:ControllerService":receive of type "urn:ControllerService":receive.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:ControllerService":receiveNotification of type "urn:ControllerService":receiveNotification.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:ControllerService":receiveStatus of type "urn:ControllerService":receiveStatus.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:ControllerService":requestStatus of type "urn:ControllerService":requestStatus.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ControllerService                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:CommonTypes":getNetwork of type "urn:CommonTypes":getNetwork.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:CommonTypes":getNetworkResponse of type "urn:CommonTypes":getNetworkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:CommonTypes":message of type "urn:CommonTypes":message.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	ControllerPortBinding 
//gsoap ns1  service type:	Controller 
//gsoap ns1  service port:	REPLACE_WITH_ACTUAL_URL 
//gsoap ns1  service namespace:	urn:ControllerService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ControllerService Definitions

@section ControllerService_bindings Service Bindings

  - @ref ControllerPortBinding

@section ControllerService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ControllerPortBinding Binding "ControllerPortBinding"

@section ControllerPortBinding_operations Operations of Binding  "ControllerPortBinding"

  - @ref __ns1__experimentEnded

  - @ref __ns1__receive

  - @ref __ns1__receiveNotification

  - @ref __ns1__receiveStatus

@section ControllerPortBinding_ports Endpoints of Binding  "ControllerPortBinding"

  - REPLACE_WITH_ACTUAL_URL

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ControllerPortBinding                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__experimentEnded                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__experimentEnded" of service binding "ControllerPortBinding"

/**

Operation details:


  - One-way message

  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__experimentEnded(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__experimentEnded*               ns1__experimentEnded_,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__experimentEnded(
    struct soap *soap,
    // request parameters:
    ns1__experimentEnded*               ns1__experimentEnded_,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapControllerPortBindingProxy.h):
@code
  class ControllerPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapControllerPortBindingService.h):
@code
  class ControllerPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	experimentEnded document
//gsoap ns1  service method-encoding:	experimentEnded literal
//gsoap ns1  service method-action:	experimentEnded ""
int __ns1__experimentEnded(
    ns1__experimentEnded*               ns1__experimentEnded_,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__receive                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__receive" of service binding "ControllerPortBinding"

/**

Operation details:


  - One-way message

  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__receive(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__receive*                       ns1__receive_,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__receive(
    struct soap *soap,
    // request parameters:
    ns1__receive*                       ns1__receive_,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapControllerPortBindingProxy.h):
@code
  class ControllerPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapControllerPortBindingService.h):
@code
  class ControllerPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	receive document
//gsoap ns1  service method-encoding:	receive literal
//gsoap ns1  service method-action:	receive ""
int __ns1__receive(
    ns1__receive*                       ns1__receive_,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__receiveNotification                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__receiveNotification" of service binding "ControllerPortBinding"

/**

Operation details:


  - One-way message

  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__receiveNotification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__receiveNotification*           ns1__receiveNotification_,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__receiveNotification(
    struct soap *soap,
    // request parameters:
    ns1__receiveNotification*           ns1__receiveNotification_,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapControllerPortBindingProxy.h):
@code
  class ControllerPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapControllerPortBindingService.h):
@code
  class ControllerPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	receiveNotification document
//gsoap ns1  service method-encoding:	receiveNotification literal
//gsoap ns1  service method-action:	receiveNotification ""
int __ns1__receiveNotification(
    ns1__receiveNotification*           ns1__receiveNotification_,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__receiveStatus                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__receiveStatus" of service binding "ControllerPortBinding"

/**

Operation details:


  - One-way message

  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__receiveStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__receiveStatus*                 ns1__receiveStatus_,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__receiveStatus(
    struct soap *soap,
    // request parameters:
    ns1__receiveStatus*                 ns1__receiveStatus_,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapControllerPortBindingProxy.h):
@code
  class ControllerPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapControllerPortBindingService.h):
@code
  class ControllerPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	receiveStatus document
//gsoap ns1  service method-encoding:	receiveStatus literal
//gsoap ns1  service method-action:	receiveStatus ""
int __ns1__receiveStatus(
    ns1__receiveStatus*                 ns1__receiveStatus_,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "urn:ControllerService"

  - <ns1:experimentEnded> (use wsdl2h option -g to auto-generate)

  - <ns1:receive> (use wsdl2h option -g to auto-generate)

  - <ns1:receiveNotification> (use wsdl2h option -g to auto-generate)

  - <ns1:receiveStatus> (use wsdl2h option -g to auto-generate)

  - <ns1:requestStatus> (use wsdl2h option -g to auto-generate)

@section ns3 Top-level root elements of schema "urn:CommonTypes"

  - <ns3:getNetwork> (use wsdl2h option -g to auto-generate)

  - <ns3:getNetworkResponse> (use wsdl2h option -g to auto-generate)

  - <ns3:message> (use wsdl2h option -g to auto-generate)

*/

/* End of controller_client_description.h */
