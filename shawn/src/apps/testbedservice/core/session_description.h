namespace session_management {
/* session_description.h
   Generated by wsdl2h 2.8.2 from SessionManagementService.wsdl and typemap.dat
   2011-06-15 20:20:03 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on session_description.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:SessionManagementService                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:SessionManagementService"
ns2 = ""
ns3 = "urn:CommonTypes"

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"urn:CommonTypes"
//gsoap ns3   schema namespace:	urn:CommonTypes
//gsoap ns3   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"urn:SessionManagementService"
//gsoap ns1   schema namespace:	urn:SessionManagementService
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns3__getNetwork.
class ns3__getNetwork;

//  Forward declaration of class ns3__getNetworkResponse.
class ns3__getNetworkResponse;

//  Forward declaration of class ns3__KeyValuePair.
class ns3__KeyValuePair;

//  Forward declaration of class ns3__message.
class ns3__message;

//  Forward declaration of class ns1__areNodesAlive.
class ns1__areNodesAlive;

//  Forward declaration of class ns1__areNodesAliveResponse.
class ns1__areNodesAliveResponse;

//  Forward declaration of class ns1__free.
class ns1__free;

//  Forward declaration of class ns1__freeResponse.
class ns1__freeResponse;

//  Forward declaration of class ns1__getConfiguration.
class ns1__getConfiguration;

//  Forward declaration of class ns1__getConfigurationResponse.
class ns1__getConfigurationResponse;

//  Forward declaration of class ns1__getInstance.
class ns1__getInstance;

//  Forward declaration of class ns1__getInstanceResponse.
class ns1__getInstanceResponse;

//  Forward declaration of class ns1__secretReservationKey.
class ns1__secretReservationKey;

//  Forward declaration of class ns1__ExperimentNotRunningException.
class ns1__ExperimentNotRunningException;

//  Forward declaration of class ns1__UnknownReservationIdException.
class ns1__UnknownReservationIdException;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:SessionManagementService                                             *
 *                                                                            *
\******************************************************************************/


/// "urn:CommonTypes":requestId is a simpleType restriction of xs:string.
typedef char* ns3__requestId;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:SessionManagementService                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// "urn:CommonTypes":getNetwork is a complexType.
class ns3__getNetwork
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":getNetworkResponse is a complexType.
class ns3__getNetworkResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":KeyValuePair is a complexType.
class ns3__KeyValuePair
{ public:
/// Element key of type xs:string.
    char*                                key                            1;	///< Required element.
/// Element value of type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:CommonTypes":message is a complexType.
class ns3__message
{ public:
/// Element sourceNodeId of type xs:string.
    char*                                sourceNodeId                   1;	///< Required element.
/// Element timestamp of type xs:dateTime.
    time_t                               timestamp                      1;	///< Required element.
/// Element binaryData of type xs:base64Binary.
    xsd__base64Binary                    binaryData                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:SessionManagementService                                             *
 *                                                                            *
\******************************************************************************/


/// "urn:SessionManagementService":areNodesAlive is a complexType.
class ns1__areNodesAlive
{ public:
/// Size of array of char* is 1..unbounded
   $int                                  __sizenodes                    1;
/// Pointer to array char* of length 1..unbounded
    char*                               *nodes                          1;	///< Nullable pointer.
/// Element controllerEndpointUrl of type xs:string.
    char*                                controllerEndpointUrl          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":areNodesAliveResponse is a complexType.
class ns1__areNodesAliveResponse
{ public:
/// Element return of type "urn:CommonTypes":requestId.
    ns3__requestId                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":free is a complexType.
class ns1__free
{ public:
/// Size of array of ns1__secretReservationKey* is 1..unbounded
   $int                                  __sizesecretReservationKey     1;
/// Pointer to array ns1__secretReservationKey* of length 1..unbounded
    ns1__secretReservationKey*          *secretReservationKey           1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":freeResponse is a complexType.
class ns1__freeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":getConfiguration is a complexType.
class ns1__getConfiguration
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":getConfigurationResponse is a complexType.
class ns1__getConfigurationResponse
{ public:
/// Element rsEndpointUrl of type xs:string.
    char*                                rsEndpointUrl                  1;	///< Required element.
/// Element snaaEndpointUrl of type xs:string.
    char*                                snaaEndpointUrl                1;	///< Required element.
/// Size of array of ns3__KeyValuePair* is 0..unbounded
   $int                                  __sizeoptions                  0;
/// Pointer to array ns3__KeyValuePair* of length 0..unbounded
    ns3__KeyValuePair*                  *options                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":getInstance is a complexType.
class ns1__getInstance
{ public:
/// Size of array of ns1__secretReservationKey* is 1..unbounded
   $int                                  __sizesecretReservationKey     1;
/// Pointer to array ns1__secretReservationKey* of length 1..unbounded
    ns1__secretReservationKey*          *secretReservationKey           1;
/// Element controller of type xs:string.
    char*                                controller                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":getInstanceResponse is a complexType.
class ns1__getInstanceResponse
{ public:
/// Element return of type xs:string.
    char*                                return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":secretReservationKey is a complexType.
class ns1__secretReservationKey
{ public:
/// Element secretReservationKey of type xs:string.
    char*                                secretReservationKey           1;	///< Required element.
/// Element urnPrefix of type xs:string.
    char*                                urnPrefix                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":ExperimentNotRunningException is a complexType.
class ns1__ExperimentNotRunningException
{ public:
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:SessionManagementService":UnknownReservationIdException is a complexType.
class ns1__UnknownReservationIdException
{ public:
/// Element message of type xs:string.
    char*                                message                        0;	///< Optional element.
/// Element reservationId of type xs:string.
    char*                                reservationId                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:CommonTypes":getNetwork of type "urn:CommonTypes":getNetwork.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:CommonTypes":getNetworkResponse of type "urn:CommonTypes":getNetworkResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:CommonTypes":message of type "urn:CommonTypes":message.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:CommonTypes                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:SessionManagementService                                             *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:SessionManagementService":areNodesAlive of type "urn:SessionManagementService":areNodesAlive.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":areNodesAliveResponse of type "urn:SessionManagementService":areNodesAliveResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":free of type "urn:SessionManagementService":free.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":freeResponse of type "urn:SessionManagementService":freeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":getConfiguration of type "urn:SessionManagementService":getConfiguration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":getConfigurationResponse of type "urn:SessionManagementService":getConfigurationResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":getInstance of type "urn:SessionManagementService":getInstance.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":getInstanceResponse of type "urn:SessionManagementService":getInstanceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":ExperimentNotRunningException of type "urn:SessionManagementService":ExperimentNotRunningException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:SessionManagementService":UnknownReservationIdException of type "urn:SessionManagementService":UnknownReservationIdException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:SessionManagementService                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	SessionManagementPortBinding 
//gsoap ns1  service type:	SessionManagement 
//gsoap ns1  service port:	REPLACE_WITH_ACTUAL_URL 
//gsoap ns1  service namespace:	urn:SessionManagementService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage SessionManagementService Definitions

@section SessionManagementService_bindings Service Bindings

  - @ref SessionManagementPortBinding

@section SessionManagementService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page SessionManagementPortBinding Binding "SessionManagementPortBinding"

@section SessionManagementPortBinding_operations Operations of Binding  "SessionManagementPortBinding"

  - @ref __ns1__areNodesAlive

  - @ref __ns1__free

  - @ref __ns1__getConfiguration

  - @ref __ns1__getInstance

  - @ref __ns1__getNetwork

@section SessionManagementPortBinding_ports Endpoints of Binding  "SessionManagementPortBinding"

  - REPLACE_WITH_ACTUAL_URL

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
    _XML                                 __any                         ;	///< Catch any element content in XML string.
    ns1__ExperimentNotRunningException*  ns1__ExperimentNotRunningException_;
///< SOAP Fault element ""urn:SessionManagementService":ExperimentNotRunningException" part "fault"
    ns1__UnknownReservationIdException*  ns1__UnknownReservationIdException_;
///< SOAP Fault element ""urn:SessionManagementService":UnknownReservationIdException" part "fault"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SessionManagementPortBinding                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__areNodesAlive                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__areNodesAlive" of service binding "SessionManagementPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__areNodesAlive(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__areNodesAlive*                 ns1__areNodesAlive_,
    // response parameters:
    ns1__areNodesAliveResponse*         ns1__areNodesAliveResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__areNodesAlive(
    struct soap *soap,
    // request parameters:
    ns1__areNodesAlive*                 ns1__areNodesAlive_,
    // response parameters:
    ns1__areNodesAliveResponse*         ns1__areNodesAliveResponse_
  );
@endcode

C++ proxy class (defined in soapSessionManagementPortBindingProxy.h):
@code
  class SessionManagementPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSessionManagementPortBindingService.h):
@code
  class SessionManagementPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	areNodesAlive document
//gsoap ns1  service method-encoding:	areNodesAlive literal
//gsoap ns1  service method-action:	areNodesAlive ""
int __ns1__areNodesAlive(
    ns1__areNodesAlive*                 ns1__areNodesAlive_,	///< Request parameter
    ns1__areNodesAliveResponse*         ns1__areNodesAliveResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__free                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__free" of service binding "SessionManagementPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "urn:SessionManagementService":ExperimentNotRunningException (literal)

  - SOAP Fault: "urn:SessionManagementService":UnknownReservationIdException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__free(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__free*                          ns1__free_,
    // response parameters:
    ns1__freeResponse*                  ns1__freeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__free(
    struct soap *soap,
    // request parameters:
    ns1__free*                          ns1__free_,
    // response parameters:
    ns1__freeResponse*                  ns1__freeResponse_
  );
@endcode

C++ proxy class (defined in soapSessionManagementPortBindingProxy.h):
@code
  class SessionManagementPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSessionManagementPortBindingService.h):
@code
  class SessionManagementPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	free document
//gsoap ns1  service method-encoding:	free literal
//gsoap ns1  service method-action:	free ""
//gsoap ns1  service method-fault:	free ns1__ExperimentNotRunningException_
//gsoap ns1  service method-fault:	free ns1__UnknownReservationIdException_
int __ns1__free(
    ns1__free*                          ns1__free_,	///< Request parameter
    ns1__freeResponse*                  ns1__freeResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getConfiguration                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getConfiguration" of service binding "SessionManagementPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getConfiguration*              ns1__getConfiguration_,
    // response parameters:
    ns1__getConfigurationResponse*      ns1__getConfigurationResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getConfiguration(
    struct soap *soap,
    // request parameters:
    ns1__getConfiguration*              ns1__getConfiguration_,
    // response parameters:
    ns1__getConfigurationResponse*      ns1__getConfigurationResponse_
  );
@endcode

C++ proxy class (defined in soapSessionManagementPortBindingProxy.h):
@code
  class SessionManagementPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSessionManagementPortBindingService.h):
@code
  class SessionManagementPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getConfiguration document
//gsoap ns1  service method-encoding:	getConfiguration literal
//gsoap ns1  service method-action:	getConfiguration ""
int __ns1__getConfiguration(
    ns1__getConfiguration*              ns1__getConfiguration_,	///< Request parameter
    ns1__getConfigurationResponse*      ns1__getConfigurationResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getInstance                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getInstance" of service binding "SessionManagementPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP Fault: "urn:SessionManagementService":ExperimentNotRunningException (literal)

  - SOAP Fault: "urn:SessionManagementService":UnknownReservationIdException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getInstance(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getInstance*                   ns1__getInstance_,
    // response parameters:
    ns1__getInstanceResponse*           ns1__getInstanceResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getInstance(
    struct soap *soap,
    // request parameters:
    ns1__getInstance*                   ns1__getInstance_,
    // response parameters:
    ns1__getInstanceResponse*           ns1__getInstanceResponse_
  );
@endcode

C++ proxy class (defined in soapSessionManagementPortBindingProxy.h):
@code
  class SessionManagementPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSessionManagementPortBindingService.h):
@code
  class SessionManagementPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getInstance document
//gsoap ns1  service method-encoding:	getInstance literal
//gsoap ns1  service method-action:	getInstance ""
//gsoap ns1  service method-fault:	getInstance ns1__ExperimentNotRunningException_
//gsoap ns1  service method-fault:	getInstance ns1__UnknownReservationIdException_
int __ns1__getInstance(
    ns1__getInstance*                   ns1__getInstance_,	///< Request parameter
    ns1__getInstanceResponse*           ns1__getInstanceResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getNetwork                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getNetwork" of service binding "SessionManagementPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getNetwork(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns3__getNetwork*                    ns3__getNetwork_,
    // response parameters:
    ns3__getNetworkResponse*            ns3__getNetworkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getNetwork(
    struct soap *soap,
    // request parameters:
    ns3__getNetwork*                    ns3__getNetwork_,
    // response parameters:
    ns3__getNetworkResponse*            ns3__getNetworkResponse_
  );
@endcode

C++ proxy class (defined in soapSessionManagementPortBindingProxy.h):
@code
  class SessionManagementPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSessionManagementPortBindingService.h):
@code
  class SessionManagementPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getNetwork document
//gsoap ns1  service method-encoding:	getNetwork literal
//gsoap ns1  service method-action:	getNetwork ""
int __ns1__getNetwork(
    ns3__getNetwork*                    ns3__getNetwork_,	///< Request parameter
    ns3__getNetworkResponse*            ns3__getNetworkResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns3 Top-level root elements of schema "urn:CommonTypes"

  - <ns3:getNetwork> (use wsdl2h option -g to auto-generate)

  - <ns3:getNetworkResponse> (use wsdl2h option -g to auto-generate)

  - <ns3:message> (use wsdl2h option -g to auto-generate)

@section ns1 Top-level root elements of schema "urn:SessionManagementService"

  - <ns1:areNodesAlive> (use wsdl2h option -g to auto-generate)

  - <ns1:areNodesAliveResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:free> (use wsdl2h option -g to auto-generate)

  - <ns1:freeResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getConfiguration> (use wsdl2h option -g to auto-generate)

  - <ns1:getConfigurationResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getInstance> (use wsdl2h option -g to auto-generate)

  - <ns1:getInstanceResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:ExperimentNotRunningException> (use wsdl2h option -g to auto-generate)

  - <ns1:UnknownReservationIdException> (use wsdl2h option -g to auto-generate)

*/

} // namespace session_management

/* End of session_description.h */
